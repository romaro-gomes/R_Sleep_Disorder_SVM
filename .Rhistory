yardstick::roc_auc(truth=sleep_disorder,estimate=c(".pred_Insomnia",".pred_None",".pred_Sleep Apnea"))
augment(final_svm_fit,test_set) |>
yardstick::roc_auc(truth=sleep_disorder,estimate=c(".pred_Insomnia",".pred_None",".pred_Sleep Apnea")) |>
autoplot()
data=readRDS(file=here('code/RDATA/data_eda.R'))
library(here)
library(tidyverse)
library(tidymodels)
library(shiny)
library(shinythemes)
model=readRDS(file=here('code/RDATA/model_svm_linear.R'))
data |> str()
data=readRDS(file=here('code/RDATA/data_eda.R'))
model=readRDS(file=here('code/RDATA/model_svm_linear.R'))
data |> str()
summary(data)
data |> head()
data |> str()
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
selectInput(
"hypertensive",
label = "Hipertensive?",
choices =c("Yes"="0",
"No"="1"),
multiple = FALSE,
selected = NULL
),
selectInput(
"atrialfibrillation",
label = "Arrhythmia?",
choices =c("Yes"="0",
"No"="1"),
multiple = FALSE,
selected = NULL
),
selectInput(
"hyperlipemia",
label = "Dyslipidemia?",
choices =c("Yes"="0",
"No"="1"),
multiple = FALSE,
selected = NULL
),
sliderInput(
"age", "Age of Patientes",
min = min(data$age) |> round(2) ,
max=max(data$age) |> round(2),
value = median(data$age) |> round(2)
),
sliderInput(
"bmi", "BMI",
min = min(data$BMI) |> round(2),
max=max(data$BMI) |> round(2),
value = median(data$BMI) |> round(2)
),
sliderInput(
"heart_rate", "Heart Rate",
min = min(data$heart_rate) |> round(2) ,
max=max(data$heart_rate) |> round(2),
value = median(data$heart_rate) |> round(2)
),
sliderInput(
"ph", "pH of Blood",
min = min(data$PH) |> round(2),
max=max(data$PH)+10 |> round(2),
value = median(data$PH) |> round(2)
),
sliderInput("respiratory_rate",
"Respiratory Rate",
min = min(data$Respiratory_rate) |> round(2),
max=max(data$Respiratory_rate) |> round(2),
value = median(data$Respiratory_rate) |> round(2)
),
actionButton("enter","Enter")
),
mainPanel(
tableOutput('table'),
verbatimTextOutput('pred')
)
)
)
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
)
)
)
server <- function(input, output, session) {}
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
)
),
mainPanel(
tableOutput('table'),
verbatimTextOutput('pred')
)
)
library(tidymodels)
library(shiny)
library(shinythemes)
data=readRDS(file=here('code/RDATA/data_eda.R'))
model=readRDS(file=here('code/RDATA/model_svm_linear.R'))
data |> head()
data |> str()
summary(data)
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
))
#   ),
#
#   mainPanel(
#     tableOutput('table'),
#     verbatimTextOutput('pred')
#
#   )
#
)
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
))
,
mainPanel()
)
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
)),
mainPanel()
)
ui = fluidPage(
theme = shinytheme("cerulean"),
titlePanel("SVM Model for prediction Death in Hospital"),
sidebarLayout(
sidebarPanel(
selectInput(
"gender",
label = "Sex of Patient",
choices =data$gender,
multiple = FALSE,
selected = NULL
),
)),
mainPanel()
)
runApp('app')
data |> head()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
c(data$gender)
levels(data$gender)
levels(data$gender)[1]
runApp('app')
runApp('app')
model
train_set$occupation |> table()
saveRDS(train_set,here('code/RDATA/train_set.R'))
saveRDS(train_set,here('code/RDATA/train_set.R'))
set.seed(1)
split <- rsample::initial_split(data_eda, prop = .80,strata = sleep_disorder)
library(here)
library(tidymodels)
library(tidyverse)
library(rpart.plot)
data_eda=readRDS(here('code/RDATA/data_eda.R'))
split <- rsample::initial_split(data_eda, prop = .80,strata = sleep_disorder)
train_set <- rsample::training(split)
train_set$occupation |> table()
data_eda=readRDS(here('code/RDATA/data_eda.R'))
data$occupation |> table
data$occupation |> table()
levels(data$gender)[1] |> class()
data |> head()
summary(data)
runApp('app')
runApp('app')
teste
teste=data[1, -c(data$sleep_disorder)]
teste=data[1, -c(data['sleep_disorder'])]
teste=data[1, 'sleep_disorder']
teste
teste=data[1, -'sleep_disorder']
teste=data[1, -c('sleep_disorder')]
teste=subset(data, select = -sleep_disoder)
summary(data)
teste=subset(data, select = -sleep_disoder)
teste=subset(data, select = -c(sleep_disoder))
teste=subset(data, select = -c(sleep_disorder))
teste
runApp('app')
teste
runApp('app')
runApp('app')
summary(data)
summary(data)
data |> str()
runApp('app')
teste
teste[1]
teste[,1]
teste[1,]
runApp('app')
runApp('app')
runApp('app')
data_shiny = data |> head(0)
str(data_shiny)
data_shiny = subset(head(data,0), select = -c(sleep_disorder))
str(data_shiny)
test=tibble(gender=input$gender |> as.factor(),
age=input$age |>  as.numeric(),
occupation=input$occupation  |> as.factor() ,
sleep_duration=input$sleep_duration |>  as.numeric(),
quality_of_sleep=input$sleep_duration  |> as.factor(),
physical_activity_level=input$ physical_activity_level,
stress_level=input$stress_level  |> as.factor(),
bmi_category=input$bmi_category  |> as.factor(),
systolic_pressure=input$systolic_pressure |>  as.numeric(),
diastolic_pressure=input$diastolic_pressure |>  as.numeric(),
heart_rate=input$heart_rate |>  as.numeric(),
daily_steps=input$daily_steps|>  as.numeric()
)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app/dashboard')
runApp('app')
runApp('app/dashboard/dashboard.R')
library(shinydashboard)
runApp('app/dashboard/dashboard.R')
library(shiny)
runApp('app/dashboard/dashboard.R')
library(here)
library(tidyverse)
library(tidymodels)
library(shinydashboard)
library(shiny)
library(shinythemes)
runApp('app/dashboard/dashboard.R')
data=readRDS(file=here('code/RDATA/data_eda.R'))
model=readRDS(file=here('code/RDATA/model_svm_linear.R'))
data_shiny = subset(head(data,0), select = -c(sleep_disorder))
ui <- dashboardPage(
dashboardHeader(title ="SVM Model Sleep Disoder Probailities"),
dashboardSidebar(
selectInput(
"gender",
label = "Sex",
choices =levels(data$gender),
multiple = FALSE,
selected =levels(data$gender)[1]
),
sliderInput(
'age',
label ='Age',
min=18,
max=99,
value=25
),
selectInput(
"occupation",
label = "Occupation",
choices =levels(data$occupation),
multiple = FALSE,
selected = levels(data$occupation)[1]
),
sliderInput(
'sleep_duration',
label ='Sleep Duration',
min=min(data$sleep_duration),
max=max(data$sleep_duration),
value=mean(data$sleep_duration) |> round(1) ,
step = 0.1
),
selectInput(
"quality_of_sleep",
label = "Qualidade do sono",
choices = levels(data$quality_of_sleep) |> sort(),
selected = levels(data$quality_of_sleep)[1]
),
sliderInput(
'physical_activity_level',
label = 'Physical Activity',
min=min(data$physical_activity_level),
max=max(data$physical_activity_level),
value=mean(data$physical_activity_level)
),
selectInput(
'stress_level',
"Stress Level",
choices = levels(data$stress_level) |> sort(),
selected = levels(data$stress_level)[1]
),
selectInput(
'bmi_category',
"BMI",
choices =levels(data$bmi_category) |> sort(),
selected = levels(data$bmi_category)[1]
),
sliderInput(
'systolic_pressure',
label = 'Systolic Pressure',
min=min(data$systolic_pressure),
max=max(data$systolic_pressure),
value=mean(data$systolic_pressure)
),
sliderInput(
'diastolic_pressure',
label = 'Diastolic Pressure',
min=min(data$diastolic_pressure),
max=max(data$diastolic_pressure),
value=mean(data$diastolic_pressure)
),
sliderInput(
'heart_rate',
label = 'Heart Rate',
min=min(data$diastolic_pressure),
max=max(data$diastolic_pressure),
value=mean(data$diastolic_pressure)
),
numericInput(
'daily_steps',
label = 'Daily Steps',
min=min(data$daily_steps),
max=max(data$daily_steps),
value=mean(data$daily_steps) |> round()
),
))
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
library(here)
library(tidyverse)
library(tidymodels)
library(shinydashboard)
library(shiny)
library(shinythemes)
data=readRDS(file=here('code/RDATA/data_eda.R'))
model=readRDS(file=here('code/RDATA/model_svm_linear.R'))
data_shiny = subset(head(data,0), select = -c(sleep_disorder))
ui <- dashboardPage(
dashboardHeader(title ="SVM Model Sleep Disoder Probailities"),
dashboardSidebar(
selectInput(
"gender",
label = "Sex",
choices =levels(data$gender),
multiple = FALSE,
selected =levels(data$gender)[1]
),
sliderInput(
'age',
label ='Age',
min=18,
max=99,
value=25
),
selectInput(
"occupation",
label = "Occupation",
choices =levels(data$occupation),
multiple = FALSE,
selected = levels(data$occupation)[1]
),
sliderInput(
'sleep_duration',
label ='Sleep Duration',
min=min(data$sleep_duration),
max=max(data$sleep_duration),
value=mean(data$sleep_duration) |> round(1) ,
step = 0.1
),
selectInput(
"quality_of_sleep",
label = "Qualidade do sono",
choices = levels(data$quality_of_sleep) |> sort(),
selected = levels(data$quality_of_sleep)[1]
),
sliderInput(
'physical_activity_level',
label = 'Physical Activity',
min=min(data$physical_activity_level),
max=max(data$physical_activity_level),
value=mean(data$physical_activity_level)
),
selectInput(
'stress_level',
"Stress Level",
choices = levels(data$stress_level) |> sort(),
selected = levels(data$stress_level)[1]
),
selectInput(
'bmi_category',
"BMI",
choices =levels(data$bmi_category) |> sort(),
selected = levels(data$bmi_category)[1]
),
sliderInput(
'systolic_pressure',
label = 'Systolic Pressure',
min=min(data$systolic_pressure),
max=max(data$systolic_pressure),
value=mean(data$systolic_pressure)
),
sliderInput(
'diastolic_pressure',
label = 'Diastolic Pressure',
min=min(data$diastolic_pressure),
max=max(data$diastolic_pressure),
value=mean(data$diastolic_pressure)
),
sliderInput(
'heart_rate',
label = 'Heart Rate',
min=min(data$diastolic_pressure),
max=max(data$diastolic_pressure),
value=mean(data$diastolic_pressure)
),
numericInput(
'daily_steps',
label = 'Daily Steps',
min=min(data$daily_steps),
max=max(data$daily_steps),
value=mean(data$daily_steps) |> round()
),
),
dashboardBody(
box(fluidRow(
tableOutput('pred')
))
)
)
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
runApp('app/dashboard/dashboard.R')
library(knitr)
runApp('app/dashboard/dashboard.R')
knitr::opts_chunk$set(
warning=FALSE, message=FALSE, tidy=TRUE,	tidy.opts=list(arrow=TRUE,	indent=2),fig.width = 6, fig.align = 'center', fig.asp=0.618, out.width = '100%')
transformResults <- resamples(list(DT=model_decision_tree_fit, SL=model_svm_linear_fit, SR=model_svm_radial_fit, RF=model_random_forest_fit))
